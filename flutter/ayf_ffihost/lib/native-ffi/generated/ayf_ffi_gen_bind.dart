// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to allow access to fernlive native backend.
class AudioYoFloNative {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  AudioYoFloNative(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  AudioYoFloNative.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  retOpaqueHandle ffi_allocate_backend_handle() {
    return _ffi_allocate_backend_handle();
  }

  late final _ffi_allocate_backend_handlePtr =
      _lookup<ffi.NativeFunction<retOpaqueHandle Function()>>(
          'ffi_allocate_backend_handle');
  late final _ffi_allocate_backend_handle =
      _ffi_allocate_backend_handlePtr.asFunction<retOpaqueHandle Function()>();

  int ffi_deallocate_backend_handle(
    ffi.Pointer<ffi.Void> opaque_hdl,
  ) {
    return _ffi_deallocate_backend_handle(
      opaque_hdl,
    );
  }

  late final _ffi_deallocate_backend_handlePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'ffi_deallocate_backend_handle');
  late final _ffi_deallocate_backend_handle = _ffi_deallocate_backend_handlePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int ffi_host_initialize(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<ffi.Pointer<ffi.Char>> argv,
    int argc,
    ffi.Pointer<func_pointers> funcs,
    int dart_port,
    int executableInBinFolder,
  ) {
    return _ffi_host_initialize(
      opaque_hdl,
      argv,
      argc,
      funcs,
      dart_port,
      executableInBinFolder,
    );
  }

  late final _ffi_host_initializePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              ffi.Pointer<func_pointers>,
              ffi.LongLong,
              ffi.Int)>>('ffi_host_initialize');
  late final _ffi_host_initialize = _ffi_host_initializePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, ffi.Pointer<func_pointers>, int, int)>();

  int ffi_host_terminate(
    ffi.Pointer<ffi.Void> opaque_hdl,
  ) {
    return _ffi_host_terminate(
      opaque_hdl,
    );
  }

  late final _ffi_host_terminatePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'ffi_host_terminate');
  late final _ffi_host_terminate =
      _ffi_host_terminatePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int ffi_req_command_decode_origin(
    ffi.Pointer<ffi.Void> hdl_class,
    ffi.Pointer<component_ident> retCp,
  ) {
    return _ffi_req_command_decode_origin(
      hdl_class,
      retCp,
    );
  }

  late final _ffi_req_command_decode_originPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<component_ident>)>>('ffi_req_command_decode_origin');
  late final _ffi_req_command_decode_origin =
      _ffi_req_command_decode_originPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<component_ident>)>();

  int ffi_req_command_decode_sswitch(
    ffi.Pointer<ffi.Void> hdl_class,
    ffi.Pointer<ffi.Int> sswitchRet,
  ) {
    return _ffi_req_command_decode_sswitch(
      hdl_class,
      sswitchRet,
    );
  }

  late final _ffi_req_command_decode_sswitchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>)>>('ffi_req_command_decode_sswitch');
  late final _ffi_req_command_decode_sswitch =
      _ffi_req_command_decode_sswitchPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>();

  int ffi_req_command_decode_broadcast(
    ffi.Pointer<ffi.Void> hdl_class,
    ffi.Pointer<ffi.Int> sswitchRet,
  ) {
    return _ffi_req_command_decode_broadcast(
      hdl_class,
      sswitchRet,
    );
  }

  late final _ffi_req_command_decode_broadcastPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>)>>('ffi_req_command_decode_broadcast');
  late final _ffi_req_command_decode_broadcast =
      _ffi_req_command_decode_broadcastPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>();

  int ffi_req_command_decode_uid(
    ffi.Pointer<ffi.Void> hdl_class,
    ffi.Pointer<ffi.Size> uid,
  ) {
    return _ffi_req_command_decode_uid(
      hdl_class,
      uid,
    );
  }

  late final _ffi_req_command_decode_uidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Size>)>>('ffi_req_command_decode_uid');
  late final _ffi_req_command_decode_uid = _ffi_req_command_decode_uidPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Size>)>();

  int ffi_req_command_decode_request_type(
    ffi.Pointer<ffi.Void> hdl_class,
    ffi.Pointer<ffi.Int> reqRetPtr,
  ) {
    return _ffi_req_command_decode_request_type(
      hdl_class,
      reqRetPtr,
    );
  }

  late final _ffi_req_command_decode_request_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Int>)>>('ffi_req_command_decode_request_type');
  late final _ffi_req_command_decode_request_type =
      _ffi_req_command_decode_request_typePtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> ffi_req_command_decode_ident_allocate_char_array(
    ffi.Pointer<ffi.Void> hdl_class,
  ) {
    return _ffi_req_command_decode_ident_allocate_char_array(
      hdl_class,
    );
  }

  late final _ffi_req_command_decode_ident_allocate_char_arrayPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>>(
      'ffi_req_command_decode_ident_allocate_char_array');
  late final _ffi_req_command_decode_ident_allocate_char_array =
      _ffi_req_command_decode_ident_allocate_char_arrayPtr
          .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<one_sequencer_event> ffi_req_command_decode_sequencer_event(
    ffi.Pointer<ffi.Void> hdl_class,
  ) {
    return _ffi_req_command_decode_sequencer_event(
      hdl_class,
    );
  }

  late final _ffi_req_command_decode_sequencer_eventPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<one_sequencer_event> Function(
                  ffi.Pointer<ffi.Void>)>>(
      'ffi_req_command_decode_sequencer_event');
  late final _ffi_req_command_decode_sequencer_event =
      _ffi_req_command_decode_sequencer_eventPtr.asFunction<
          ffi.Pointer<one_sequencer_event> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<one_process> ffi_process_handle_for_uid(
    ffi.Pointer<ffi.Void> opaque_hdl,
    int uId,
  ) {
    return _ffi_process_handle_for_uid(
      opaque_hdl,
      uId,
    );
  }

  late final _ffi_process_handle_for_uidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<one_process> Function(
              ffi.Pointer<ffi.Void>, ffi.Int)>>('ffi_process_handle_for_uid');
  late final _ffi_process_handle_for_uid =
      _ffi_process_handle_for_uidPtr.asFunction<
          ffi.Pointer<one_process> Function(ffi.Pointer<ffi.Void>, int)>();

  int ffi_process_decode_iterator_context(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<ffi.Void> it_handle,
  ) {
    return _ffi_process_decode_iterator_context(
      opaque_hdl,
      it_handle,
    );
  }

  late final _ffi_process_decode_iterator_contextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('ffi_process_decode_iterator_context');
  late final _ffi_process_decode_iterator_context =
      _ffi_process_decode_iterator_contextPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> ffi_process_iterator_next(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<ffi.Void> it_handle,
    int idNext,
  ) {
    return _ffi_process_iterator_next(
      opaque_hdl,
      it_handle,
      idNext,
    );
  }

  late final _ffi_process_iterator_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('ffi_process_iterator_next');
  late final _ffi_process_iterator_next =
      _ffi_process_iterator_nextPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<component_ident> ffi_process_decode_iterator_component(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<ffi.Void> it_handle,
  ) {
    return _ffi_process_decode_iterator_component(
      opaque_hdl,
      it_handle,
    );
  }

  late final _ffi_process_decode_iterator_componentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<component_ident> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('ffi_process_decode_iterator_component');
  late final _ffi_process_decode_iterator_component =
      _ffi_process_decode_iterator_componentPtr.asFunction<
          ffi.Pointer<component_ident> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> ffi_process_decode_iterator_module(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<ffi.Void> it_handle,
  ) {
    return _ffi_process_decode_iterator_module(
      opaque_hdl,
      it_handle,
    );
  }

  late final _ffi_process_decode_iterator_modulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('ffi_process_decode_iterator_module');
  late final _ffi_process_decode_iterator_module =
      _ffi_process_decode_iterator_modulePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> ffi_process_decode_iterator_connector(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<ffi.Void> it_handle,
  ) {
    return _ffi_process_decode_iterator_connector(
      opaque_hdl,
      it_handle,
    );
  }

  late final _ffi_process_decode_iterator_connectorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('ffi_process_decode_iterator_connector');
  late final _ffi_process_decode_iterator_connector =
      _ffi_process_decode_iterator_connectorPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<process_ready> ffi_process_system_ready(
    ffi.Pointer<ffi.Void> opaque_hdl,
  ) {
    return _ffi_process_system_ready(
      opaque_hdl,
    );
  }

  late final _ffi_process_system_readyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<process_ready> Function(
              ffi.Pointer<ffi.Void>)>>('ffi_process_system_ready');
  late final _ffi_process_system_ready = _ffi_process_system_readyPtr
      .asFunction<ffi.Pointer<process_ready> Function(ffi.Pointer<ffi.Void>)>();

  int ffi_sequencer_status(
    ffi.Pointer<ffi.Void> opaque_hdl,
  ) {
    return _ffi_sequencer_status(
      opaque_hdl,
    );
  }

  late final _ffi_sequencer_statusPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'ffi_sequencer_status');
  late final _ffi_sequencer_status = _ffi_sequencer_statusPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int ffi_sequencer_start(
    ffi.Pointer<ffi.Void> opaque_hdl,
    int granularity_state_report,
  ) {
    return _ffi_sequencer_start(
      opaque_hdl,
      granularity_state_report,
    );
  }

  late final _ffi_sequencer_startPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int)>>(
      'ffi_sequencer_start');
  late final _ffi_sequencer_start = _ffi_sequencer_startPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  int ffi_sequencer_stop(
    ffi.Pointer<ffi.Void> opaque_hdl,
  ) {
    return _ffi_sequencer_stop(
      opaque_hdl,
    );
  }

  late final _ffi_sequencer_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'ffi_sequencer_stop');
  late final _ffi_sequencer_stop =
      _ffi_sequencer_stopPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int ffi_sequencer_ack_stop(
    ffi.Pointer<ffi.Void> opaque_hdl,
  ) {
    return _ffi_sequencer_ack_stop(
      opaque_hdl,
    );
  }

  late final _ffi_sequencer_ack_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'ffi_sequencer_ack_stop');
  late final _ffi_sequencer_ack_stop = _ffi_sequencer_ack_stopPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int ffi_sequencer_trigger(
    ffi.Pointer<ffi.Void> opaque_hdl,
  ) {
    return _ffi_sequencer_trigger(
      opaque_hdl,
    );
  }

  late final _ffi_sequencer_triggerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'ffi_sequencer_trigger');
  late final _ffi_sequencer_trigger = _ffi_sequencer_triggerPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int ffi_periodic_trigger(
    ffi.Pointer<ffi.Void> opaque_hdl,
  ) {
    return _ffi_periodic_trigger(
      opaque_hdl,
    );
  }

  late final _ffi_periodic_triggerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'ffi_periodic_trigger');
  late final _ffi_periodic_trigger = _ffi_periodic_triggerPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<one_property_comp> ffi_properties_request_handle(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<component_ident> cpIdArg,
  ) {
    return _ffi_properties_request_handle(
      opaque_hdl,
      cpIdArg,
    );
  }

  late final _ffi_properties_request_handlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<one_property_comp> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<component_ident>)>>('ffi_properties_request_handle');
  late final _ffi_properties_request_handle =
      _ffi_properties_request_handlePtr.asFunction<
          ffi.Pointer<one_property_comp> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<component_ident>)>();

  int ffi_properties_return_handle(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<one_property_comp> prop_hdl,
  ) {
    return _ffi_properties_return_handle(
      opaque_hdl,
      prop_hdl,
    );
  }

  late final _ffi_properties_return_handlePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<one_property_comp>)>>('ffi_properties_return_handle');
  late final _ffi_properties_return_handle =
      _ffi_properties_return_handlePtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<one_property_comp>)>();

  int ffi_properties_number_properties(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<one_property_comp> prop_hdl,
  ) {
    return _ffi_properties_number_properties(
      opaque_hdl,
      prop_hdl,
    );
  }

  late final _ffi_properties_number_propertiesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<one_property_comp>)>>(
      'ffi_properties_number_properties');
  late final _ffi_properties_number_properties =
      _ffi_properties_number_propertiesPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<one_property_comp>)>();

  ffi.Pointer<one_property_full_plus> ffi_properties_descriptor_property_lin(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<one_property_comp> opaque_prop,
    int id_prop,
    int descr_depth,
  ) {
    return _ffi_properties_descriptor_property_lin(
      opaque_hdl,
      opaque_prop,
      id_prop,
      descr_depth,
    );
  }

  late final _ffi_properties_descriptor_property_linPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<one_property_full_plus> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<one_property_comp>,
              ffi.Int,
              ffi.Int)>>('ffi_properties_descriptor_property_lin');
  late final _ffi_properties_descriptor_property_lin =
      _ffi_properties_descriptor_property_linPtr.asFunction<
          ffi.Pointer<one_property_full_plus> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<one_property_comp>, int, int)>();

  ffi.Pointer<one_property_full_plus> ffi_properties_descriptor_property_descr(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<one_property_comp> opaque_prop,
    ffi.Pointer<ffi.Char> descror,
    int descr_depth,
  ) {
    return _ffi_properties_descriptor_property_descr(
      opaque_hdl,
      opaque_prop,
      descror,
      descr_depth,
    );
  }

  late final _ffi_properties_descriptor_property_descrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<one_property_full_plus> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<one_property_comp>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('ffi_properties_descriptor_property_descr');
  late final _ffi_properties_descriptor_property_descr =
      _ffi_properties_descriptor_property_descrPtr.asFunction<
          ffi.Pointer<one_property_full_plus> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<one_property_comp>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<one_property_string_list> ffi_properties_get_string_list(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<one_property_comp> opaque_prop,
    ffi.Pointer<ffi.Char> desror,
    int contentOnly,
    int offset,
  ) {
    return _ffi_properties_get_string_list(
      opaque_hdl,
      opaque_prop,
      desror,
      contentOnly,
      offset,
    );
  }

  late final _ffi_properties_get_string_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<one_property_string_list> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<one_property_comp>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int)>>('ffi_properties_get_string_list');
  late final _ffi_properties_get_string_list =
      _ffi_properties_get_string_listPtr.asFunction<
          ffi.Pointer<one_property_string_list> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<one_property_comp>,
              ffi.Pointer<ffi.Char>,
              int,
              int)>();

  ffi.Pointer<one_property_string_list> ffi_properties_get_selection_list(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<one_property_comp> opaque_prop,
    ffi.Pointer<ffi.Char> desror,
    int contentOnly,
    int offset,
    ffi.Pointer<jvxUInt32> fillSelected,
    ffi.Pointer<jvxUInt32> fillSelectable,
    ffi.Pointer<jvxUInt32> fillExclusive,
    int numEntries,
    int numFill,
  ) {
    return _ffi_properties_get_selection_list(
      opaque_hdl,
      opaque_prop,
      desror,
      contentOnly,
      offset,
      fillSelected,
      fillSelectable,
      fillExclusive,
      numEntries,
      numFill,
    );
  }

  late final _ffi_properties_get_selection_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<one_property_string_list> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<one_property_comp>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<jvxUInt32>,
              ffi.Pointer<jvxUInt32>,
              ffi.Pointer<jvxUInt32>,
              jvxSize,
              jvxSize)>>('ffi_properties_get_selection_list');
  late final _ffi_properties_get_selection_list =
      _ffi_properties_get_selection_listPtr.asFunction<
          ffi.Pointer<one_property_string_list> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<one_property_comp>,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              ffi.Pointer<jvxUInt32>,
              ffi.Pointer<jvxUInt32>,
              ffi.Pointer<jvxUInt32>,
              int,
              int)>();

  int ffi_properties_get_content_property_fld(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<one_property_comp> opaque_prop,
    ffi.Pointer<ffi.Char> desror,
    int contentOnly,
    int offset,
    ffi.Pointer<ffi.Void> fld,
    int format,
    int numEntries,
  ) {
    return _ffi_properties_get_content_property_fld(
      opaque_hdl,
      opaque_prop,
      desror,
      contentOnly,
      offset,
      fld,
      format,
      numEntries,
    );
  }

  late final _ffi_properties_get_content_property_fldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<one_property_comp>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              jvxSize)>>('ffi_properties_get_content_property_fld');
  late final _ffi_properties_get_content_property_fld =
      _ffi_properties_get_content_property_fldPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<one_property_comp>,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              int)>();

  ffi.Pointer<ffi.Char> ffi_properties_get_string(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<one_property_comp> opaque_prop,
    ffi.Pointer<ffi.Char> desror,
  ) {
    return _ffi_properties_get_string(
      opaque_hdl,
      opaque_prop,
      desror,
    );
  }

  late final _ffi_properties_get_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<one_property_comp>,
              ffi.Pointer<ffi.Char>)>>('ffi_properties_get_string');
  late final _ffi_properties_get_string =
      _ffi_properties_get_stringPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<one_property_comp>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<one_property_value_in_range> ffi_properties_get_value_in_range(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<one_property_comp> opaque_prop,
    ffi.Pointer<ffi.Char> desror,
    int contentOnly,
    int offset,
    ffi.Pointer<ffi.Void> fld,
    int numEntries,
  ) {
    return _ffi_properties_get_value_in_range(
      opaque_hdl,
      opaque_prop,
      desror,
      contentOnly,
      offset,
      fld,
      numEntries,
    );
  }

  late final _ffi_properties_get_value_in_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<one_property_value_in_range> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<one_property_comp>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              jvxSize,
              ffi.Pointer<ffi.Void>,
              jvxSize)>>('ffi_properties_get_value_in_range');
  late final _ffi_properties_get_value_in_range =
      _ffi_properties_get_value_in_rangePtr.asFunction<
          ffi.Pointer<one_property_value_in_range> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<one_property_comp>,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              ffi.Pointer<ffi.Void>,
              int)>();

  int ffi_properties_set_content_property_fld(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<one_property_comp> opaque_prop,
    ffi.Pointer<ffi.Char> desror,
    int contentOnly,
    int offset,
    ffi.Pointer<ffi.Void> fld,
    int format,
    int numEntries,
    int reportSetMode,
  ) {
    return _ffi_properties_set_content_property_fld(
      opaque_hdl,
      opaque_prop,
      desror,
      contentOnly,
      offset,
      fld,
      format,
      numEntries,
      reportSetMode,
    );
  }

  late final _ffi_properties_set_content_property_fldPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<one_property_comp>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              jvxSize,
              ffi.Int)>>('ffi_properties_set_content_property_fld');
  late final _ffi_properties_set_content_property_fld =
      _ffi_properties_set_content_property_fldPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<one_property_comp>,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int)>();

  int ffi_properties_set_selection_list(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<one_property_comp> opaque_prop,
    ffi.Pointer<ffi.Char> desror,
    int contentOnly,
    int offset,
    ffi.Pointer<jvxUInt32> passSelected,
    int numEntries,
    int numOneEntry,
    int reportSetMode,
  ) {
    return _ffi_properties_set_selection_list(
      opaque_hdl,
      opaque_prop,
      desror,
      contentOnly,
      offset,
      passSelected,
      numEntries,
      numOneEntry,
      reportSetMode,
    );
  }

  late final _ffi_properties_set_selection_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<one_property_comp>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<jvxUInt32>,
              jvxSize,
              jvxSize,
              ffi.Int)>>('ffi_properties_set_selection_list');
  late final _ffi_properties_set_selection_list =
      _ffi_properties_set_selection_listPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<one_property_comp>,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              ffi.Pointer<jvxUInt32>,
              int,
              int,
              int)>();

  int ffi_properties_set_value_range(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<one_property_comp> opaque_prop,
    ffi.Pointer<ffi.Char> desror,
    int contentOnly,
    int offset,
    ffi.Pointer<ffi.Void> fld,
    int numEntries,
    double minVal,
    double maxVal,
    int reportSetMode,
  ) {
    return _ffi_properties_set_value_range(
      opaque_hdl,
      opaque_prop,
      desror,
      contentOnly,
      offset,
      fld,
      numEntries,
      minVal,
      maxVal,
      reportSetMode,
    );
  }

  late final _ffi_properties_set_value_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<one_property_comp>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Void>,
              jvxSize,
              ffi.Double,
              ffi.Double,
              ffi.Int)>>('ffi_properties_set_value_range');
  late final _ffi_properties_set_value_range =
      _ffi_properties_set_value_rangePtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<one_property_comp>,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              double,
              double,
              int)>();

  int ffi_properties_set_single_string(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<one_property_comp> opaque_prop,
    ffi.Pointer<ffi.Char> desror,
    ffi.Pointer<ffi.Char> txt,
    int reportSetMode,
  ) {
    return _ffi_properties_set_single_string(
      opaque_hdl,
      opaque_prop,
      desror,
      txt,
      reportSetMode,
    );
  }

  late final _ffi_properties_set_single_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<one_property_comp>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('ffi_properties_set_single_string');
  late final _ffi_properties_set_single_string =
      _ffi_properties_set_single_stringPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<one_property_comp>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int ffi_properties_set_collect_start(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<one_property_comp> prop_hdl,
  ) {
    return _ffi_properties_set_collect_start(
      opaque_hdl,
      prop_hdl,
    );
  }

  late final _ffi_properties_set_collect_startPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<one_property_comp>)>>(
      'ffi_properties_set_collect_start');
  late final _ffi_properties_set_collect_start =
      _ffi_properties_set_collect_startPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<one_property_comp>)>();

  int ffi_properties_set_collect_stop(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<one_property_comp> prop_hdl,
  ) {
    return _ffi_properties_set_collect_stop(
      opaque_hdl,
      prop_hdl,
    );
  }

  late final _ffi_properties_set_collect_stopPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<one_property_comp>)>>(
      'ffi_properties_set_collect_stop');
  late final _ffi_properties_set_collect_stop =
      _ffi_properties_set_collect_stopPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<one_property_comp>)>();

  int ffi_properties_string_to_array(
    ffi.Pointer<ffi.Char> txt,
    ffi.Pointer<ffi.Void> fldBuffer,
    int offset,
    int numElements,
    int formatElements,
  ) {
    return _ffi_properties_string_to_array(
      txt,
      fldBuffer,
      offset,
      numElements,
      formatElements,
    );
  }

  late final _ffi_properties_string_to_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
              ffi.Int, ffi.Int, ffi.Int)>>('ffi_properties_string_to_array');
  late final _ffi_properties_string_to_array =
      _ffi_properties_string_to_arrayPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int, int, int)>();

  ffi.Pointer<ffi.Char> ffi_component_description(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<component_ident> address,
  ) {
    return _ffi_component_description(
      opaque_hdl,
      address,
    );
  }

  late final _ffi_component_descriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<component_ident>)>>('ffi_component_description');
  late final _ffi_component_description =
      _ffi_component_descriptionPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<component_ident>)>();

  int ffi_component_number_components(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<component_ident> address,
  ) {
    return _ffi_component_number_components(
      opaque_hdl,
      address,
    );
  }

  late final _ffi_component_number_componentsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<component_ident>)>>(
      'ffi_component_number_components');
  late final _ffi_component_number_components =
      _ffi_component_number_componentsPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<component_ident>)>();

  int ffi_component_number_devices(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<component_ident> address,
  ) {
    return _ffi_component_number_devices(
      opaque_hdl,
      address,
    );
  }

  late final _ffi_component_number_devicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<component_ident>)>>('ffi_component_number_devices');
  late final _ffi_component_number_devices =
      _ffi_component_number_devicesPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<component_ident>)>();

  ffi.Pointer<device_capabilities> ffi_component_capabilities_device(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<component_ident> address,
    int idx,
  ) {
    return _ffi_component_capabilities_device(
      opaque_hdl,
      address,
      idx,
    );
  }

  late final _ffi_component_capabilities_devicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<device_capabilities> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<component_ident>,
              ffi.Int)>>('ffi_component_capabilities_device');
  late final _ffi_component_capabilities_device =
      _ffi_component_capabilities_devicePtr.asFunction<
          ffi.Pointer<device_capabilities> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<component_ident>, int)>();

  ffi.Pointer<selection_option> ffi_component_selection_option(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<component_ident> address,
    int idx,
  ) {
    return _ffi_component_selection_option(
      opaque_hdl,
      address,
      idx,
    );
  }

  late final _ffi_component_selection_optionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<selection_option> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<component_ident>,
              ffi.Int)>>('ffi_component_selection_option');
  late final _ffi_component_selection_option =
      _ffi_component_selection_optionPtr.asFunction<
          ffi.Pointer<selection_option> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<component_ident>, int)>();

  ffi.Pointer<ss_list> ffi_component_slot_allocation(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<component_ident> address,
  ) {
    return _ffi_component_slot_allocation(
      opaque_hdl,
      address,
    );
  }

  late final _ffi_component_slot_allocationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ss_list> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<component_ident>)>>('ffi_component_slot_allocation');
  late final _ffi_component_slot_allocation =
      _ffi_component_slot_allocationPtr.asFunction<
          ffi.Pointer<ss_list> Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<component_ident>)>();

  ffi.Pointer<component_ident> ffi_select_component(
    ffi.Pointer<ffi.Void> opaque_hdl,
    int cpTp,
    int slotid,
    int slotSubId,
    int idx,
  ) {
    return _ffi_select_component(
      opaque_hdl,
      cpTp,
      slotid,
      slotSubId,
      idx,
    );
  }

  late final _ffi_select_componentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<component_ident> Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Int, ffi.Int, jvxSize)>>('ffi_select_component');
  late final _ffi_select_component = _ffi_select_componentPtr.asFunction<
      ffi.Pointer<component_ident> Function(
          ffi.Pointer<ffi.Void>, int, int, int, int)>();

  int ffi_activate_selected_component(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<component_ident> address,
  ) {
    return _ffi_activate_selected_component(
      opaque_hdl,
      address,
    );
  }

  late final _ffi_activate_selected_componentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<component_ident>)>>(
      'ffi_activate_selected_component');
  late final _ffi_activate_selected_component =
      _ffi_activate_selected_componentPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<component_ident>)>();

  int ffi_deactivate_selected_component(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<component_ident> address,
  ) {
    return _ffi_deactivate_selected_component(
      opaque_hdl,
      address,
    );
  }

  late final _ffi_deactivate_selected_componentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<component_ident>)>>(
      'ffi_deactivate_selected_component');
  late final _ffi_deactivate_selected_component =
      _ffi_deactivate_selected_componentPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<component_ident>)>();

  int ffi_unselect_selected_component(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<component_ident> address,
  ) {
    return _ffi_unselect_selected_component(
      opaque_hdl,
      address,
    );
  }

  late final _ffi_unselect_selected_componentPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<component_ident>)>>(
      'ffi_unselect_selected_component');
  late final _ffi_unselect_selected_component =
      _ffi_unselect_selected_componentPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<component_ident>)>();

  int ffi_config_save(
    ffi.Pointer<ffi.Void> opaque_hdl,
  ) {
    return _ffi_config_save(
      opaque_hdl,
    );
  }

  late final _ffi_config_savePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'ffi_config_save');
  late final _ffi_config_save =
      _ffi_config_savePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int ffi_get_compile_flags(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<ffi.Int> dataTpFormat,
    ffi.Pointer<ffi.Int> num32BitWordsSelection,
  ) {
    return _ffi_get_compile_flags(
      opaque_hdl,
      dataTpFormat,
      num32BitWordsSelection,
    );
  }

  late final _ffi_get_compile_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('ffi_get_compile_flags');
  late final _ffi_get_compile_flags = _ffi_get_compile_flagsPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int ffi_set_operation_flags(
    ffi.Pointer<ffi.Void> opaque_hdl,
    int reportSet,
    int reportSyncDirectArg,
  ) {
    return _ffi_set_operation_flags(
      opaque_hdl,
      reportSet,
      reportSyncDirectArg,
    );
  }

  late final _ffi_set_operation_flagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int,
              ffi.Int)>>('ffi_set_operation_flags');
  late final _ffi_set_operation_flags = _ffi_set_operation_flagsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  int ffi_translate_enum_string(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<ffi.Char> typeName,
    ffi.Pointer<ffi.Char> typeSelect,
  ) {
    return _ffi_translate_enum_string(
      opaque_hdl,
      typeName,
      typeSelect,
    );
  }

  late final _ffi_translate_enum_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('ffi_translate_enum_string');
  late final _ffi_translate_enum_string =
      _ffi_translate_enum_stringPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>();

  int ffi_lookup_component_class(
    ffi.Pointer<ffi.Void> opaque_hdl,
    int cpType,
  ) {
    return _ffi_lookup_component_class(
      opaque_hdl,
      cpType,
    );
  }

  late final _ffi_lookup_component_classPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Int)>>(
      'ffi_lookup_component_class');
  late final _ffi_lookup_component_class = _ffi_lookup_component_classPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  int ffi_preload_dll(
    ffi.Pointer<ffi.Pointer<ffi.Void>> dllhandle,
    ffi.Pointer<ffi.Char> dllPath,
  ) {
    return _ffi_preload_dll(
      dllhandle,
      dllPath,
    );
  }

  late final _ffi_preload_dllPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Char>)>>('ffi_preload_dll');
  late final _ffi_preload_dll = _ffi_preload_dllPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Char>)>();

  /// ! Sync and asynchronous callback function to re-enter the host
  int ffi_host_request_command_fwd(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<ffi.Void> request_command,
    int async$,
  ) {
    return _ffi_host_request_command_fwd(
      opaque_hdl,
      request_command,
      async$,
    );
  }

  late final _ffi_host_request_command_fwdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Int)>>('ffi_host_request_command_fwd');
  late final _ffi_host_request_command_fwd =
      _ffi_host_request_command_fwdPtr.asFunction<
          int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  int ffi_host_request_command_reschedule(
    ffi.Pointer<ffi.Void> request_command,
  ) {
    return _ffi_host_request_command_reschedule(
      request_command,
    );
  }

  late final _ffi_host_request_command_reschedulePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>(
          'ffi_host_request_command_reschedule');
  late final _ffi_host_request_command_reschedule =
      _ffi_host_request_command_reschedulePtr
          .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> ffi_transfer_command(
    ffi.Pointer<ffi.Void> opaque_hdl,
    ffi.Pointer<ffi.Char> cmd,
    int json_out,
  ) {
    return _ffi_transfer_command(
      opaque_hdl,
      cmd,
      json_out,
    );
  }

  late final _ffi_transfer_commandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('ffi_transfer_command');
  late final _ffi_transfer_command = _ffi_transfer_commandPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> ffi_encode_component_identification(
    int cpTp,
    int slotid,
    int slotsubid,
  ) {
    return _ffi_encode_component_identification(
      cpTp,
      slotid,
      slotsubid,
    );
  }

  late final _ffi_encode_component_identificationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Int, ffi.Int,
              ffi.Int)>>('ffi_encode_component_identification');
  late final _ffi_encode_component_identification =
      _ffi_encode_component_identificationPtr
          .asFunction<ffi.Pointer<ffi.Char> Function(int, int, int)>();

  int ffi_last_error() {
    return _ffi_last_error();
  }

  late final _ffi_last_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ffi_last_error');
  late final _ffi_last_error = _ffi_last_errorPtr.asFunction<int Function()>();

  /// ! Delete a buffer. The tp argument specifies the type
  int ffi_host_delete(
    ffi.Pointer<ffi.Void> ptr,
    int tp,
  ) {
    return _ffi_host_delete(
      ptr,
      tp,
    );
  }

  late final _ffi_host_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Void>, ffi.UnsignedInt)>>('ffi_host_delete');
  late final _ffi_host_delete = _ffi_host_deletePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  /// ! Test function to run a test command via ffi bridge
  int ffi_simple_call() {
    return _ffi_simple_call();
  }

  late final _ffi_simple_callPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('ffi_simple_call');
  late final _ffi_simple_call =
      _ffi_simple_callPtr.asFunction<int Function()>();
}

typedef jvxCBitField64 = ffi.Uint64;
//typedef DartjvxCBitField64 = int;
typedef jvxCBitField32 = ffi.Uint32;
//typedef DartjvxCBitField32 = int;
typedef jvxSize = ffi.Size;
//typedef DartjvxSize = int;
typedef jvxUInt32 = ffi.Uint32;
//typedef DartjvxUInt32 = int;
typedef jvxInt32 = ffi.Int32;
//typedef DartjvxInt32 = int;

sealed class ffiCallbackIds {
  static const JVX_FFI_CALLBACK_ASYNC_REPORT_TEXT = 0;
  static const JVX_FFI_CALLBACK_SYNC_REPORT_INTERNALS_CHANGED = 1;
  static const JVX_FFI_CALLBACK_ASYNC_REPORT_COMMAND_REQUEST = 2;
  static const JVX_FFI_CALLBACK_REQUEST_COMMAND = 3;
}

sealed class ffiDeleteDatatype {
  static const JVX_DELETE_DATATYPE_ASYNC_CALLBACK = 0;
  static const JVX_DELETE_DATATYPE_CHAR_ARRAY = 1;
  static const JVX_DELETE_DATATYPE_INTERNAL_CHANGED = 2;
  static const JVX_DELETE_DATATYPE_REQUEST_COMMAND = 3;
  static const JVX_DELETE_DATATYPE_ONE_PROCESS = 4;
  static const JVX_DELETE_DATATYPE_ONE_PROP_HANDLER = 5;
  static const JVX_DELETE_DATATYPE_ONE_SEQ_EVENT = 6;
  static const JVX_DELETE_DATATYPE_ONE_COMPONENT_IDENT = 7;
  static const JVX_DELETE_DATATYPE_ONE_PROPERTY_DESCRIPTOR_FULL_PLUS = 8;
  static const JVX_DELETE_DATATYPE_PROCESS_READY = 9;
  static const JVX_DELETE_DATATYPE_PROPERTY_STRING_LIST = 10;
  static const JVX_DELETE_DATATYPE_DEVICE_CAPS = 11;
  static const JVX_DELETE_DATATYPE_SELECTION_OPTION = 12;
  static const JVX_DELETE_DATATYPE_SS_LIST = 13;
  static const JVX_DELETE_DATATYPE_VALUE_IN_RANGE = 14;
}

final class one_property_min extends ffi.Struct {
  @ffi.Int()
  external int valid_parts;

  @ffi.Int()
  external int category;

  @ffi.Int()
  external int globalIdx;
}

final class one_property_core extends ffi.Struct {
  external one_property_min pmin;

  @ffi.Int()
  external int format;

  @ffi.Int()
  external int num;

  @ffi.Int()
  external int accessType;

  @ffi.Int()
  external int decTp;

  @ffi.Int()
  external int ctxt;
}

final class one_property_control extends ffi.Struct {
  external one_property_core core;

  @ffi.Int()
  external int allowedStateMask;

  @ffi.Int()
  external int allowedThreadingMask;

  @ffi.Int()
  external int isValid;

  @ffi.Int()
  external int invalidateOnStateSwitch;

  @ffi.Int()
  external int invalidateOnTest;

  @ffi.Int()
  external int installable;
}

final class one_property_full extends ffi.Struct {
  external one_property_control ctrl;

  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> description;

  external ffi.Pointer<ffi.Char> descriptor;
}

final class one_property_full_plus extends ffi.Struct {
  external one_property_full full;

  @jvxCBitField64()
  external int accessFlags;

  @jvxCBitField32()
  external int configModeFlags;
}

final class component_ident extends ffi.Struct {
  @ffi.Int()
  external int tp;

  @jvxSize()
  external int slotid;

  @jvxSize()
  external int slotsubid;

  @jvxSize()
  external int uId;
}

final class report_internal_changed extends ffi.Struct {
  external component_ident from;

  external component_ident to;

  @ffi.Int()
  external int cat;

  @jvxSize()
  external int propId;

  @ffi.Int()
  external int onlyContent;

  @jvxSize()
  external int offset_start;

  @jvxSize()
  external int numElements;

  @ffi.Int()
  external int callpurpose;
}

final class retOpaqueHandle extends ffi.Struct {
  @ffi.Int()
  external int err_code;

  external ffi.Pointer<ffi.Void> opaque_hdl;
}

final class report_callback extends ffi.Struct {
  @ffi.Int()
  external int callback_id;

  @ffi.Int()
  external int callback_subid;

  external ffi.Pointer<ffi.Void> load_fld;

  @ffi.Size()
  external int sz_fld;
}

final class one_process extends ffi.Struct {
  @ffi.Int()
  external int uId;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Int()
  external int category;

  external ffi.Pointer<ffi.Void> iterator;
}

final class one_property_comp extends ffi.Struct {
  external component_ident cpId;

  external ffi.Pointer<ffi.Void> obj_ptr;

  external ffi.Pointer<ffi.Void> prop_ptr;
}

final class one_sequencer_event extends ffi.Struct {
  @ffi.Int()
  external int event_mask;

  external ffi.Pointer<ffi.Char> description;

  @ffi.Int()
  external int sequenceId;

  @ffi.Int()
  external int stepId;

  @ffi.Int()
  external int qtp;

  @ffi.Int()
  external int setp;

  @ffi.Int()
  external int fId;

  @ffi.Int()
  external int seq_state_id;

  @ffi.Int()
  external int statSeq;

  @ffi.Int()
  external int indicateFirstError;
}

final class process_ready extends ffi.Struct {
  @ffi.Int()
  external int err;

  external ffi.Pointer<ffi.Char> reason_if_not;
}

final class func_pointers extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<report_callback> report_hdl)>> cb_sync;
}

final class one_property_string_list extends ffi.Struct {
  @ffi.Int()
  external int nEntries;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> pEntries;
}

final class device_capabilities extends ffi.Struct {
  external ffi.Pointer<ffi.Char> description;

  external ffi.Pointer<ffi.Char> descriptor;

  @jvxCBitField64()
  external int caps;

  @ffi.Int()
  external int flow;

  @jvxCBitField32()
  external int flags;

  @ffi.Int()
  external int selectable;

  @ffi.Int()
  external int proxy;

  @ffi.Int()
  external int slotsubid;

  @ffi.Int()
  external int stat;
}

final class selection_option extends ffi.Struct {
  external ffi.Pointer<ffi.Char> description;

  external ffi.Pointer<ffi.Char> descriptor;
}

final class ss_list extends ffi.Struct {
  external ffi.Pointer<jvxInt32> slots;

  external ffi.Pointer<jvxInt32> subslots;

  @ffi.Int()
  external int num;
}

final class one_property_value_in_range extends ffi.Struct {
  @ffi.Double()
  external double minVal;

  @ffi.Double()
  external double maxVal;
}
